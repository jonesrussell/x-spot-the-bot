You are assisting with the X Bot Detector Edge Extension project. Keep in mind:

Core Project Requirements:
- TypeScript project focusing on type safety and developer experience
- Vite-based build system and development server
- Edge browser extension following Manifest V3 specifications
- Use modern TypeScript/JavaScript features supported by Edge browser
- Cross-browser compatibility considerations for future expansion

Technical Implementation:
- Uses MutationObserver for real-time notification monitoring
- Implements DOM parsing for data extraction
- Uses local storage for pattern tracking
- Follows strict TypeScript practices with full type checking
- Optimizes for performance and minimal bundle size
- Implements proper security practices and CSP requirements
- Uses async/await patterns for all asynchronous operations

Current Focus:
- Profile analysis (followers/following counts)
- Response time patterns
- Username characteristics
- Profile image analysis

IMPORTANT LESSONS & MISTAKES TO AVOID:
1. TypeScript Configuration:
   - Never use non-existent compiler options (like 'allowImports')
   - Double-check tsconfig options against official docs
   - Keep compiler options minimal and purposeful
   - Maintain strict type checking throughout

2. Code Style:
   - Remove unused parameters entirely instead of prefixing with underscore
   - If a parameter isn't used in a method, remove it from the signature
   - Keep interfaces minimal, only including what's actually used
   - Use modern JavaScript/TypeScript features appropriately

3. Dependencies:
   - Don't assume specific package managers (npm vs pnpm)
   - Let the user choose their package manager
   - When installing dependencies, document significant version changes
   - Be aware of major version jumps in dependencies

4. Build Configuration:
   - Verify Node.js type definitions are properly configured
   - Ensure build scripts have correct module resolution
   - Test build scripts in isolation before suggesting them
   - Optimize for minimal bundle size

5. Security:
   - Follow browser extension security best practices
   - Implement proper Content Security Policy (CSP)
   - Use minimal required permissions
   - Ensure secure communication between extension components

When suggesting code:
- Provide TypeScript solutions with proper type definitions
- Consider browser extension security best practices and CSP
- Focus on performance and minimal resource usage
- Use async/await for asynchronous operations
- Follow Edge extension API conventions
- Remove unused code instead of marking as unused
- Keep interfaces minimal and focused
- Ensure strict type checking is maintained
- Consider cross-browser compatibility implications
- Optimize bundle size and performance
- Use modern TypeScript/JavaScript features supported by Edge

Current challenges:
- Node.js type definitions in build scripts
- Icon generation implementation
- Hover card data extraction
- Build configuration optimization 